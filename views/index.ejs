<%- include('partials/header.ejs'); -%>

<div class="flex-row-container" id="players">

</div>

<div class="input-block">


    <input type="text" list="opponents" id="opponent-input" placeholder="Enter your opponent" >
    
    <datalist id="opponents">

    </datalist>

    <input type="text" id="character-input" placeholder="Enter your oponents character" >

    

    <button id="character-send" class="button">
        Add character
    </button>
</div>  
<div class="flex-col-container">
    <p id="start-game-message" style="display: none;">Wait for host to start the game</p>
    <button id="start-game" class="button">
        Start Game
    </button>

    <p id="room">Room Code: <span id="room-code"><%= code %></span></p>
</div>


<pre id="messages"></pre>



<script>
    const players = document.getElementById('players');

    const oponentNameInput = document.getElementById('opponent-input');
    const opponentsList = document.getElementById('opponents');

    const characterInput = document.getElementById('character-input');

    const characterSend = document.getElementById('character-send');
    const startGame = document.getElementById('start-game')

    const messages = document.getElementById('messages');

    const roomParagraph = document.getElementById('room-code');

    const ws = new WebSocket('ws://localhost:3000'); //wss://heads-up-1.onrender.com

    var playerName;
    var messagesCount = 0;
    var roomCode;  
    var isHost = 0;
    var numberOfPlayers = 0;
    var readyPlayers = 0;

    ws.onopen = () => {
        playerName = "<%= name %>";  
        roomCode = "<%= code %>"
        isHost = "<%= isHost %>";
        roomParagraph.textContent = roomCode;
        // Get info about the status of the game from the db and send your name to the other players
        ws.send(JSON.stringify({roomCode: roomCode, type: 'get-data-from-db', name: playerName })); 
    };

    startGame.addEventListener('click', () => {
        if (readyPlayers === numberOfPlayers - 1){
            console.log(` players ready : ${readyPlayers}  no of players : ${numberOfPlayers}`)
            startGame.style.display = 'none';
            messages.style.display = 'flex';
            players.style.display = 'none';
            document.getElementById('room').style.display = 'none';
            // broadcast the start of the game
            ws.send(JSON.stringify({roomCode: roomCode, type: 'start-game'}));
        } else {
            window.alert("Please wait for all players to be ready.")
        }
    });

    characterSend.addEventListener('click', () => {

        if(oponentNameInput.value === "" || characterInput.value === ""){
            window.alert("Please enter both your opponent's name and character.");
            return;
        }
        const val = {
            oponentName: oponentNameInput?.value,
            character: characterInput?.value,
            playerName: playerName,
            roomCode: roomCode,
            type: 'sendCharacters'
        };

        const ready = {
            roomCode: roomCode,
            playerName: playerName,
            type: 'updateDB',
            oponentName: oponentNameInput?.value,
            character: characterInput?.value,
        }

        const form = document.querySelector('.input-block');
        if (form) {
            form.style.display = 'none';
        }
        
        if(isHost == 1){
            startGame.style.display = 'block';
        } else {
            document.getElementById('start-game-message').style.display = 'block';
        }

        if (!val) {
            return;
        } else if (!ws) {
            return;
        }
        ws.send(JSON.stringify(val));

        ws.send(JSON.stringify(ready));
        createMessageDiv(val.oponentName, val.character);
    }); 

    ws.onmessage = (event) => {
        console.log("Broadcast received");
        var object = JSON.parse(event.data);
        console.log(`obiekt type = ${object.type}`);
        console.log(`obiekt roomCode = ${object.roomCode}`)
        // Check if the player is the same as the current player or another player
        

        if(roomCode === object.roomCode){

            if (object.type === 'names'){
                
                // Extracting all the names from the map into an array `allNames` and their status into different array
                const allNames = object.allNames.map(obj => obj.name);
                const allIsReady = object.allNames.map(obj => obj.isready);

                numberOfPlayers = allNames.length;
                
                            
                const oponentNames = object.characters.map(obj => obj.name);
                const characters = object.characters.map(obj => obj.character);

                if(messagesCount === 0){

                    for (let i = 0; i < characters.length; i++){
                        createMessageDiv(oponentNames[i], characters[i]);   
                    }

                    for( let i = 0; i < allNames.length; i++ ){

                        if(allNames[i] != playerName){
                            createOptionElement(allNames[i]);
                            createPlayerCircle(allNames[i]);

                            // if the player was ready change the circle color to green
                            if(allIsReady[i] === 1){
                                changeCircleBorder(allNames[i]);
                            }
                        }

                    }
                    messagesCount++;
                } else{
                    createOptionElement(allNames[allNames.length - 1]);
                    createPlayerCircle(allNames[allNames.length - 1]);
                }
            
            } else if (object.type === 'sendCharacters'){

                if (playerName === object.oponentName){
                    createMessageDiv(object.oponentName, "???????");
                    changeCircleBorder(object.playerName);
                } else{
                    createMessageDiv(object.oponentName, object.character); 
                    changeCircleBorder(object.playerName);
                }
                

            } else if (object.type === 'start-game'){
                startGame.style.display = 'none';
                messages.style.display = 'flex';
                players.style.display = 'none';
                document.getElementById('room').style.display = 'none'; 
                document.getElementById('start-game-message').style.display = 'none';
            }
        }
        
        console.log(playerName);
    };

    function createMessageDiv(oponentName, character) {
        // Create a new div element
        const messageDiv = document.createElement('div');
        messageDiv.textContent = `${oponentName} - ${character}`;
        messageDiv.classList.add('message');

        // Append the new div to the messages container
        messages.appendChild(messageDiv);
        console.log(`dodaje do diva ${oponentName} - ${character}`);
    }

    function createOptionElement(oponentName){
        const option = document.createElement('option')

        option.value = `${oponentName}`
        opponentsList.appendChild(option);
    }

    function createPlayerCircle( name ) {
        const circleDiv = document.createElement('div');

        circleDiv.className = 'circle';
        circleDiv.id = name;
        circleDiv.textContent = name[0].toUpperCase();
        players.appendChild(circleDiv);
    }

    function changeCircleBorder( name ){
        readyPlayers++;
        console.log(`changing circle border for player : ${name}`)
        const player = document.getElementById(name); 
        player.style.border = '3px solid #28A745';
    }

</script>

<%- include('partials/footer.ejs'); -%>
