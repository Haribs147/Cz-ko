<%- include('partials/header.ejs'); -%>

<div class="input-block">


    <input type="text" list="opponents" id="opponent-input" placeholder="Enter your opponent">
    
    <datalist id="opponents">

    </datalist>
    <!-- <input type="text" id="oponent-input" placeholder="Enter your oponent"> -->


    <input type="text" id="character-input" placeholder="Enter your oponents character">

    

    <button id="character-send" class="button">
        Add character
    </button>
</div>  
<div class="flex-col-container">
    <button id="start-game" class="button">
        Start Game
    </button>

    <p id="room">Room Code: <span id="room-code"><%= code %></span></p>
</div>


<pre id="messages"></pre>



<script>

    const oponentNameInput = document.getElementById('opponent-input');
    const opponentsList = document.getElementById('opponents');

    const characterInput = document.getElementById('character-input');

    const characterSend = document.getElementById('character-send');
    const startGame = document.getElementById('start-game')

    const messages = document.getElementById('messages');

    const roomParagraph = document.getElementById('room-code');

    const ws = new WebSocket('ws://localhost:3000'); //wss://heads-up-1.onrender.com

    var playerName = '<=% name %>';
    var messagesCount = 0;
    var roomCode = "";  
    var isHost = 0;
    ws.onopen = () => {
        playerName = "<%= name %>";  // The name is passed from the server-side EJS rendering
        roomCode = "<%= code %>"
        isHost = "<%= isHost %>";
        roomParagraph.textContent = roomCode;
        console.log(`IMIEEEEEEE ${playerName}`)
        //save the player name into allNames
        ws.send(JSON.stringify({roomCode: roomCode, type: 'name', name: playerName })); //wysyłam całą tablicę osób, jakie są w grze i jeżeli czyDostalem = 0 to biorę całą tablice i tworze forem, a jeżeli czyDostalem = 1 to biorę ostatni indeks tablicy i dodaję
    };

    startGame.addEventListener('click', () => {
        startGame.style.display = 'none';
        messages.style.display = 'flex';
        document.getElementById('room').style.display = 'none';
        // broadcast the start of the game
        ws.send(JSON.stringify({roomCode: roomCode, type: 'start-game'}));
    });

    characterSend.addEventListener('click', () => {
        const val = {
            oponentName: oponentNameInput?.value,
            character: characterInput?.value,
            roomCode: roomCode,
        };

        const form = document.querySelector('.input-block');
        if (form) {
            form.style.display = 'none';
        }
        console.log(isHost);
        if(isHost == 1){
            startGame.style.display = 'block';
        }

        if (!val) {
            return;
        } else if (!ws) {
            return;
        }
        ws.send(JSON.stringify(val));
        createMessageDiv(val.oponentName, val.character);
    }); 

    ws.onmessage = (event) => {
        console.log("Broadcast received");
        var object = JSON.parse(event.data);
        console.log(`obiekt type = ${object.type}`);
        console.log(`obiekt roomCode = ${object.roomCode}`)
        // Check if the player is the same as the current player or another player
        

        if(roomCode === object.roomCode){
            if (playerName === object.oponentName) {
                console.log(`watttt ${object.oponentName}`);
                createMessageDiv(object.oponentName, "???????");
            } else if (object.type === 'name'){
                
                // Extracting all the names from the map into an array `allNames`
                const allNames = object.allNames.map(obj => obj.name);

                console.log(`ALL NAMES od 0 : ${allNames[0]}`);
                if(messagesCount === 0){
                    for( let i = 0; i < allNames.length; i++ ){

                        if(allNames[i] != playerName){
                            createOptionElement(allNames[i]);
                        }

                    }
                    messagesCount++;
                } else{
                    createOptionElement(allNames[allNames.length - 1]);
                }
            } else if (object.type === 'start-game'){
                startGame.style.display = 'none';
                messages.style.display = 'flex';
                document.getElementById('room').style.display = 'none'; 
            } else{
                createMessageDiv(object.oponentName, object.character);
            }
        }
        
        console.log(playerName);
    };

    function createMessageDiv(oponentName, character) {
        // Create a new div element
        const messageDiv = document.createElement('div');

        // Set the content of the div
        messageDiv.textContent = `${oponentName} - ${character}`;

        // Optionally, add a class for styling
        messageDiv.classList.add('message');

        // Append the new div to the messages container
        messages.appendChild(messageDiv);
        console.log(`dodaje do diva ${oponentName} - ${character}`);
    }

    function createOptionElement(oponentName){
        const option = document.createElement('option')

        option.value = `${oponentName}`
        opponentsList.appendChild(option);
    }

    function showMessage(message) {
        messages.textContent += `\n${message}`;
    }
</script>

<%- include('partials/footer.ejs'); -%>
